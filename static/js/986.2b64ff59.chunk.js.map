{"version":3,"file":"static/js/986.2b64ff59.chunk.js","mappings":"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","sources":["Mocks/Handlers/GroupBill.ts","Mocks/Handlers/Bill.ts","Mocks/Handlers/Transaction.ts","Mocks/Handlers/Transactions.ts","Mocks/Handlers/Data.ts","Mocks/Models/Data.ts","Mocks/Models/Targets.ts","Mocks/Handlers/Target.ts","Mocks/index.tsx"],"sourcesContent":["import { DefaultBodyType, http, HttpResponse, StrictRequest } from \"msw\";\r\nimport { OUR_API_ADDRESS, OUR_API_ENDPOINTS } from \"../../API/Manager\";\r\nimport {\r\n    getGroupBill,\r\n    createGroupBill,\r\n    updateGroupBill,\r\n    deleteGroupBill,\r\n    getGroupBills,\r\n    getIncomeByGroupBillId,\r\n    getExpensesByGroupBillId,\r\n    getBalanceByGroupBillId,\r\n    getCurrentBalanceByGroupBillId,\r\n} from \"../Models/GroupBill\";\r\nimport { IGroupBill } from \"../../type\";\r\n\r\ninterface IGroupBillHandler {\r\n    params: {\r\n        groupBillId: string;\r\n    };\r\n    request?: StrictRequest<DefaultBodyType> | undefined;\r\n};\r\n\r\n\r\nconst groupBillUrl = OUR_API_ADDRESS + \"/\" + OUR_API_ENDPOINTS.GROUPBILL;\r\nconst groupBillIdUrl = groupBillUrl + \"/:\" + OUR_API_ENDPOINTS.GROUPBILLID;\r\nconst groupBillIncomeUrl = groupBillUrl + \"/\" + OUR_API_ENDPOINTS.INCOME + \"/:\" + OUR_API_ENDPOINTS.GROUPBILLID;\r\nconst groupBillExpensesUrl = groupBillUrl + \"/\" + OUR_API_ENDPOINTS.EXPENSES + \"/:\" + OUR_API_ENDPOINTS.GROUPBILLID;\r\nconst groupBillBalanceUrl = groupBillUrl + \"/\" + OUR_API_ENDPOINTS.BALANCE + \"/:\" + OUR_API_ENDPOINTS.GROUPBILLID;\r\nconst groupBillCurrentBalanceUrl = groupBillUrl + \"/\" + OUR_API_ENDPOINTS.CURRENT + \"/:\" + OUR_API_ENDPOINTS.GROUPBILLID;\r\n\r\nexport const groupBillHandlers = [\r\n\r\n    http.get(groupBillUrl, () => {\r\n        const groupBills = getGroupBills();\r\n        return HttpResponse.json(groupBills);\r\n    }),\r\n\r\n    http.get(groupBillIdUrl, async ({ params }: IGroupBillHandler) => {\r\n        const { groupBillId } = params;\r\n        const groupBill = getGroupBill(groupBillId);\r\n        return HttpResponse.json(groupBill);\r\n    }),\r\n\r\n    http.post(groupBillUrl, async ({ request }) => {\r\n        const data = (await request.json()) as IGroupBill;\r\n        createGroupBill(data);\r\n        return HttpResponse.json({ success: true }, { status: 200 });\r\n    }),\r\n\r\n    http.put(groupBillIdUrl, async ({ params, request }: IGroupBillHandler) => {\r\n        if (request) {\r\n            const { groupBillId } = params;\r\n            const groupBill = (await request.json()) as IGroupBill;\r\n            updateGroupBill(groupBillId, groupBill);\r\n            return HttpResponse.json({ success: true }, { status: 200 });\r\n        }\r\n        return HttpResponse.error();\r\n    }),\r\n\r\n    http.delete(groupBillIdUrl, async ({ params }: IGroupBillHandler) => {\r\n        const { groupBillId } = params;\r\n        deleteGroupBill(groupBillId);\r\n        return HttpResponse.json({ success: true }, { status: 200 });\r\n    }),\r\n\r\n    http.get(groupBillIncomeUrl, async ({ params, request }: IGroupBillHandler) => {\r\n        const { groupBillId } = params;\r\n\r\n        if (request) {\r\n            const url = new URL(request.url);\r\n            const startDate = url.searchParams.get(\"startDate\");\r\n            const endDate = url.searchParams.get(\"endDate\");\r\n            if (startDate && endDate) {\r\n                const sum = getIncomeByGroupBillId(groupBillId, startDate, endDate);\r\n                return HttpResponse.json(sum, { status: 200 });\r\n            }\r\n        }\r\n\r\n        return HttpResponse.error();\r\n    }),\r\n\r\n    http.get(groupBillExpensesUrl, async ({ params, request }: IGroupBillHandler) => {\r\n        const { groupBillId } = params;\r\n\r\n        if (request) {\r\n            const url = new URL(request.url);\r\n            const startDate = url.searchParams.get(\"startDate\");\r\n            const endDate = url.searchParams.get(\"endDate\");\r\n            if (startDate && endDate) {\r\n                const sum = getExpensesByGroupBillId(groupBillId, startDate, endDate);\r\n                return HttpResponse.json(sum, { status: 200 });\r\n            }\r\n        }\r\n\r\n        return HttpResponse.error();\r\n    }),\r\n\r\n    http.get(groupBillBalanceUrl, async ({ params, request }: IGroupBillHandler) => {\r\n        const { groupBillId } = params;\r\n\r\n        if (request) {\r\n            const url = new URL(request.url);\r\n            const startDate = url.searchParams.get(\"startDate\");\r\n            const endDate = url.searchParams.get(\"endDate\");\r\n            if (startDate && endDate) {\r\n                const balance = getBalanceByGroupBillId(groupBillId, startDate, endDate);\r\n                return HttpResponse.json(balance, { status: 200 });\r\n            }\r\n        }\r\n\r\n        return HttpResponse.error();\r\n    }),\r\n\r\n    http.get(groupBillCurrentBalanceUrl, async ({ params }: IGroupBillHandler) => {\r\n        const { groupBillId } = params;\r\n        const balance = getCurrentBalanceByGroupBillId(groupBillId);\r\n        return HttpResponse.json(balance, { status: 200 });\r\n    }),\r\n];\r\n","import { DefaultBodyType, http, HttpResponse, StrictRequest } from \"msw\";\r\nimport { OUR_API_ADDRESS, OUR_API_ENDPOINTS } from \"../../API/Manager\";\r\nimport {\r\n    updateBill,\r\n    getBill,\r\n    createBill,\r\n    deleteBill,\r\n    bills,\r\n    getIncomeByBillId,\r\n    getExpensesByBillId,\r\n    getBalanceByBillId,\r\n    getCurrentBalanceByBillId,\r\n} from \"../Models/Bill\";\r\nimport { IBill } from \"../../type\";\r\n\r\ninterface IBillHandler {\r\n    params: {\r\n        billId: string;\r\n    };\r\n    request?: StrictRequest<DefaultBodyType> | undefined;\r\n};\r\n\r\nconst billUrl = OUR_API_ADDRESS + \"/\" + OUR_API_ENDPOINTS.BILLS;\r\nconst billIdUrl = billUrl + \"/:\" + OUR_API_ENDPOINTS.BILLID;\r\nconst billIncomeUrl = billUrl + \"/\" + OUR_API_ENDPOINTS.INCOME + \"/:\" + OUR_API_ENDPOINTS.BILLID;\r\nconst billExpensesUrl = billUrl + \"/\" + OUR_API_ENDPOINTS.EXPENSES + \"/:\" + OUR_API_ENDPOINTS.BILLID;\r\nconst billBalanceUrl = billUrl + \"/\" + OUR_API_ENDPOINTS.BALANCE + \"/:\" + OUR_API_ENDPOINTS.BILLID;\r\nconst billCurrentBalanceUrl = billUrl + \"/\" + OUR_API_ENDPOINTS.CURRENT + \"/:\" + OUR_API_ENDPOINTS.BILLID;\r\n\r\nexport const billHandlers = [\r\n\r\n    http.get(billUrl, () => {\r\n        return HttpResponse.json(bills);\r\n    }),\r\n\r\n    http.get(billIdUrl, async ({ params }: IBillHandler) => {\r\n        const { billId } = params;\r\n        const bill = getBill(billId);\r\n        return HttpResponse.json(bill);\r\n    }),\r\n\r\n    http.post(billUrl, async ({ request }) => {\r\n        const data = (await request.json()) as IBill;\r\n        createBill(data);\r\n        return HttpResponse.json({ success: true }, { status: 200 });\r\n    }),\r\n\r\n    http.put(billIdUrl, async ({ params, request }: IBillHandler) => {\r\n        if (request) {\r\n            const { billId } = params;\r\n            const bill = (await request.json()) as IBill;\r\n            updateBill(billId, bill);\r\n            return HttpResponse.json({ success: true }, { status: 200 });\r\n        }\r\n        return HttpResponse.error();\r\n    }),\r\n\r\n    http.delete(billIdUrl, async ({ params }: IBillHandler) => {\r\n        const { billId } = params;\r\n        deleteBill(billId);\r\n        return HttpResponse.json({ success: true }, { status: 200 });\r\n    }),\r\n\r\n    http.get(billIncomeUrl, async ({ params, request }: IBillHandler) => {\r\n        const { billId } = params;\r\n\r\n        if (request) {\r\n            const url = new URL(request.url);\r\n            const startDate = url.searchParams.get(\"startDate\");\r\n            const endDate = url.searchParams.get(\"endDate\");\r\n            if (startDate && endDate) {\r\n                const sum = getIncomeByBillId(billId, startDate, endDate);\r\n                return HttpResponse.json(sum, { status: 200 });\r\n            }\r\n        }\r\n\r\n        return HttpResponse.error();\r\n    }),\r\n\r\n    http.get(billExpensesUrl, async ({ params, request }: IBillHandler) => {\r\n        const { billId } = params;\r\n\r\n        if (request) {\r\n            const url = new URL(request.url);\r\n            const startDate = url.searchParams.get(\"startDate\");\r\n            const endDate = url.searchParams.get(\"endDate\");\r\n            if (startDate && endDate) {\r\n                const sum = getExpensesByBillId(billId, startDate, endDate);\r\n                return HttpResponse.json(sum, { status: 200 });\r\n            }\r\n        }\r\n\r\n        return HttpResponse.error();\r\n    }),\r\n\r\n    http.get(billBalanceUrl, async ({ params, request }: IBillHandler) => {\r\n        const { billId } = params;\r\n\r\n        if (request) {\r\n            const url = new URL(request.url);\r\n            const startDate = url.searchParams.get(\"startDate\");\r\n            const endDate = url.searchParams.get(\"endDate\");\r\n            if (startDate && endDate) {\r\n                const balance = getBalanceByBillId(billId, startDate, endDate);\r\n                return HttpResponse.json(balance, { status: 200 });\r\n            }\r\n        }\r\n\r\n        return HttpResponse.error();\r\n    }),\r\n\r\n    http.get(billCurrentBalanceUrl, async ({ params }: IBillHandler) => {\r\n        const { billId } = params;\r\n        const balance = getCurrentBalanceByBillId(billId);\r\n        return HttpResponse.json(balance, { status: 200 });\r\n    }),\r\n];\r\n","import { DefaultBodyType, http, HttpResponse, StrictRequest } from \"msw\";\r\nimport { OUR_API_ADDRESS, OUR_API_ENDPOINTS } from \"../../API/Manager\";\r\nimport {\r\n    createTransaction,\r\n    updateTransaction,\r\n    deleteTransaction,\r\n    getTransaction,\r\n} from \"../Models/Transaction\";\r\nimport { ITransaction } from \"../../type\";\r\n\r\ninterface ITransactionHandler {\r\n    params: {\r\n        transactionId: string;\r\n    };\r\n    request?: StrictRequest<DefaultBodyType> | undefined;\r\n};\r\n\r\nconst transactionUrl = OUR_API_ADDRESS + \"/\" + OUR_API_ENDPOINTS.TRANSACTION;\r\nconst transactionIdUrl =\r\n    transactionUrl + \"/:\" + OUR_API_ENDPOINTS.TRANSACTIONID;\r\n\r\nexport const transactionHandlers = [\r\n\r\n    http.get(transactionIdUrl, async ({ params }: ITransactionHandler) => {\r\n        const { transactionId } = params;\r\n        const transaction = getTransaction(transactionId);\r\n        return HttpResponse.json(transaction);\r\n    }),\r\n\r\n    http.post(transactionUrl, async ({ request }) => {\r\n        const data = (await request.json()) as ITransaction;\r\n        createTransaction(data);\r\n        return HttpResponse.json({ success: true }, { status: 200 });\r\n    }),\r\n\r\n    http.put(\r\n        transactionIdUrl,\r\n        async ({ params, request }: ITransactionHandler) => {\r\n            if (request) {\r\n                const { transactionId } = params;\r\n                const transaction = (await request.json()) as ITransaction;\r\n                updateTransaction(transactionId, transaction);\r\n                return HttpResponse.json({ success: true }, { status: 200 });\r\n            }\r\n            return HttpResponse.error();\r\n        }\r\n    ),\r\n\r\n    http.delete(transactionIdUrl, async ({ params }: ITransactionHandler) => {\r\n        const { transactionId } = params;\r\n        deleteTransaction(transactionId);\r\n        return HttpResponse.json({ success: true }, { status: 200 });\r\n    }),\r\n];\r\n","import { http, HttpResponse } from \"msw\";\r\nimport { OUR_API_ADDRESS, OUR_API_ENDPOINTS } from \"../../API/Manager\";\r\nimport { getTxByBillId, getTxByGroupBillId, transactions } from \"../Models/Transaction\";\r\n\r\ninterface ITransactionsHandler {\r\n    params: {\r\n        billId: string;\r\n        groupBillId: string;\r\n    };\r\n};\r\n\r\nconst transactionUrl = OUR_API_ADDRESS + \"/\" + OUR_API_ENDPOINTS.TRANSACTIONS;\r\nconst transactionIdUrl =\r\n    transactionUrl + \"/:\" + OUR_API_ENDPOINTS.BILLID;\r\nconst transactionGroupBillUrl = transactionUrl + \"/\" + OUR_API_ENDPOINTS.GROUPBILL + \"/:\" + OUR_API_ENDPOINTS.GROUPBILLID;\r\n\r\nexport const transactionsHandlers = [\r\n    http.get(transactionUrl, () => {\r\n        return HttpResponse.json(transactions);\r\n    }),\r\n\r\n    http.get(transactionIdUrl, async ({ params }: ITransactionsHandler) => {\r\n        const { billId } = params;\r\n        const transactions = getTxByBillId(billId);\r\n        return HttpResponse.json(transactions);\r\n    }),\r\n\r\n    http.get(transactionGroupBillUrl, async ({ params }: ITransactionsHandler) => {\r\n        const { groupBillId } = params;\r\n        const transactions = getTxByGroupBillId(groupBillId);\r\n        return HttpResponse.json(transactions);\r\n    }),\r\n];\r\n","import { DefaultBodyType, http, HttpResponse, StrictRequest } from \"msw\";\r\nimport { OUR_API_ADDRESS, OUR_API_ENDPOINTS } from \"../../API/Manager\";\r\nimport { exportData, importData } from \"../Models/Data\";\r\n\r\ninterface IDataHandler {\r\n    request: StrictRequest<DefaultBodyType> | undefined;\r\n};\r\n\r\ninterface IData {\r\n    groupBills: any;\r\n    bills: any;\r\n    transactions: any;\r\n}\r\n\r\nconst dataUrl = OUR_API_ADDRESS + \"/\" + OUR_API_ENDPOINTS.DATA;\r\n\r\nexport const dataHandlers = [\r\n\r\n    http.get(dataUrl, async () => {\r\n        exportData();\r\n        return HttpResponse.json({ success: true }, { status: 200 });\r\n    }),\r\n\r\n    http.post(dataUrl, async ({ request }: IDataHandler) => {\r\n        if (request) {\r\n            const data = (await request.json()) as IData;\r\n            importData(data);\r\n            return HttpResponse.json({ success: true }, { status: 200 });\r\n        }\r\n        return HttpResponse.error();\r\n    }),\r\n];\r\n","import { addGroupBills, getGroupBillsForExport } from \"./GroupBill\";\r\nimport { addTransactions, getTransactions } from \"./Transaction\";\r\nimport { addBills, getBillsForExport } from \"./Bill\";\r\nimport { IBill, IGroupBill, ITransaction } from \"../../type\";\r\n\r\nexport function exportData() {\r\n    const data = {\r\n        groupBills: getGroupBillsForExport(),\r\n        bills: getBillsForExport(),\r\n        transactions: getTransactions(),\r\n    }\r\n\r\n    const dataStr = JSON.stringify(data, null, 2);\r\n    const blob = new Blob([dataStr], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'data.json';\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n}\r\n\r\nexport function importData(data: { groupBills: IGroupBill[]; bills: IBill[]; transactions: ITransaction[] }) {\r\n    addTransactions(data.transactions);\r\n    addGroupBills(data.groupBills);\r\n    addBills(data.bills);\r\n}","import { ITarget } from \"../../type\";\r\nimport { getCurrentBalanceByGroupBillId } from \"./GroupBill\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst targets = [\r\n    {\r\n        id: '1',\r\n        groupBillId: '411ce821-5ba7-4829-a3c9-d31f2763d26e',\r\n        name: 'Цель A',\r\n        target: 500,\r\n        balance: 0,\r\n        date: '2024-06-08T00:00:00+01:00',\r\n    },\r\n    {\r\n        id: '2',\r\n        groupBillId: '411ce821-5ba7-4829-a3c9-d31f2763d26e',\r\n        name: 'Цель B',\r\n        target: 1000,\r\n        balance: 0,\r\n        date: '2024-06-08T00:00:00+01:00',\r\n    },\r\n    {\r\n        id: '3',\r\n        groupBillId: '411ce821-5ba7-4829-a3c9-d31f2763d26e',\r\n        name: 'Цель C',\r\n        target: 750,\r\n        balance: 0,\r\n        date: '2024-06-08T00:00:00+01:00',\r\n    }\r\n];\r\n\r\nexport function getTargets() {\r\n    targets.forEach(target => {\r\n        target.balance = getCurrentBalanceByGroupBillId(target.groupBillId);\r\n    })\r\n\r\n    return targets;\r\n}\r\n\r\nexport function addTarget(target: ITarget) {\r\n    const newTarget = {\r\n        id: uuidv4(),\r\n        groupBillId: target.groupBillId,\r\n        name: target.name,\r\n        target: target.target,\r\n        balance: getCurrentBalanceByGroupBillId(target.groupBillId),\r\n        date: target.date.toString()\r\n    }\r\n\r\n    targets.push(newTarget);\r\n}\r\n\r\nexport function updateTarget(id: string, target: ITarget) {\r\n    const index = targets.findIndex((t) => t.id === id);\r\n    const newTarget = {\r\n        id: id,\r\n        groupBillId: target.groupBillId,\r\n        name: target.name,\r\n        target: target.target,\r\n        balance: getCurrentBalanceByGroupBillId(target.groupBillId),\r\n        date: target.date.toString()\r\n    }\r\n    if (index !== -1) {\r\n        targets[index] = newTarget;\r\n    }\r\n}\r\n\r\nexport function deleteTarget(id: string) {\r\n    const index = targets.findIndex((t) => t.id === id);\r\n    if (index !== -1) {\r\n        targets.splice(index, 1);\r\n    }\r\n}\r\n\r\nexport function getTarget(id: string) {\r\n    return targets.find((t) => t.id === id);\r\n}","import { DefaultBodyType, http, HttpResponse, StrictRequest } from \"msw\";\r\nimport { OUR_API_ADDRESS, OUR_API_ENDPOINTS } from \"../../API/Manager\";\r\nimport { addTarget, deleteTarget, getTargets, updateTarget } from \"../Models/Targets\";\r\nimport { ITarget } from \"../../type\";\r\n\r\ninterface ITargetHandler {\r\n    params: {\r\n        targetId: string;\r\n    };\r\n    request?: StrictRequest<DefaultBodyType> | undefined;\r\n};\r\n\r\nconst targetUrl = OUR_API_ADDRESS + \"/\" + OUR_API_ENDPOINTS.TARGETS;\r\nconst targetIdUrl = targetUrl + \"/:\" + OUR_API_ENDPOINTS.TARGETID;\r\n\r\nexport const targetHandlers = [\r\n\r\n    http.get(targetUrl, async () => {\r\n        const targets = getTargets();\r\n        return HttpResponse.json(targets);\r\n    }),\r\n\r\n    http.post(targetUrl, async ({ request }: ITargetHandler) => {\r\n        if (request) {\r\n            const data = (await request.json()) as ITarget;\r\n            addTarget(data);\r\n            return HttpResponse.json({ success: true }, { status: 200 });\r\n\r\n        }\r\n        return HttpResponse.error();\r\n    }),\r\n\r\n    http.put(\r\n        targetIdUrl,\r\n        async ({ params, request }: ITargetHandler) => {\r\n            if (request) {\r\n                const { targetId } = params;\r\n                const target = (await request.json()) as ITarget;\r\n                updateTarget(targetId, target);\r\n                return HttpResponse.json({ success: true }, { status: 200 });\r\n            }\r\n            return HttpResponse.error();\r\n        }\r\n    ),\r\n\r\n    http.delete(targetIdUrl, async ({ params }: ITargetHandler) => {\r\n        const { targetId } = params;\r\n        deleteTarget(targetId);\r\n        return HttpResponse.json({ success: true }, { status: 200 });\r\n    }),\r\n];\r\n","import { setupWorker, SetupWorker } from \"msw/browser\";\r\nimport { groupBillHandlers } from \"./Handlers/GroupBill\";\r\nimport { billHandlers } from \"./Handlers/Bill\";\r\nimport { transactionHandlers } from \"./Handlers/Transaction\";\r\nimport { transactionsHandlers } from \"./Handlers/Transactions\";\r\nimport { dataHandlers } from \"./Handlers/Data\";\r\nimport { targetHandlers } from \"./Handlers/Target\";\r\n\r\nconst worker: SetupWorker = setupWorker(\r\n    ...groupBillHandlers,\r\n    ...billHandlers,\r\n    ...transactionHandlers,\r\n    ...transactionsHandlers,\r\n    ...dataHandlers,\r\n    ...targetHandlers\r\n);\r\n\r\nexport function startWorker(): Promise<void> {\r\n    return worker.start({\r\n        serviceWorker: {\r\n            url: \"/cost-control-pages/mockServiceWorker.js\",\r\n        },\r\n        onUnhandledRequest(req, print) {\r\n            return; // Пропустим все запросы, не подходящие под наши хэндлеры\r\n        },\r\n    }) as Promise<void>; // либа не экспортирует нужный интерфейс\r\n}\r\n"],"names":["groupBillUrl","OUR_API_ADDRESS","OUR_API_ENDPOINTS","GROUPBILL","groupBillIdUrl","GROUPBILLID","groupBillIncomeUrl","INCOME","groupBillExpensesUrl","EXPENSES","groupBillBalanceUrl","BALANCE","groupBillCurrentBalanceUrl","CURRENT","groupBillHandlers","http","get","groupBills","getGroupBills","HttpResponse","json","async","params","_ref","groupBillId","groupBill","getGroupBill","post","request","_ref2","data","createGroupBill","success","status","put","_ref3","updateGroupBill","error","delete","_ref4","deleteGroupBill","_ref5","url","URL","startDate","searchParams","endDate","sum","getIncomeByGroupBillId","_ref6","getExpensesByGroupBillId","_ref7","balance","getBalanceByGroupBillId","_ref8","getCurrentBalanceByGroupBillId","billUrl","BILLS","billIdUrl","BILLID","billIncomeUrl","billExpensesUrl","billBalanceUrl","billCurrentBalanceUrl","billHandlers","bills","billId","bill","getBill","createBill","updateBill","deleteBill","getIncomeByBillId","getExpensesByBillId","getBalanceByBillId","getCurrentBalanceByBillId","transactionUrl","TRANSACTION","transactionIdUrl","TRANSACTIONID","transactionHandlers","transactionId","transaction","getTransaction","createTransaction","updateTransaction","deleteTransaction","TRANSACTIONS","transactionGroupBillUrl","transactionsHandlers","transactions","getTxByBillId","getTxByGroupBillId","dataUrl","DATA","dataHandlers","getGroupBillsForExport","getBillsForExport","getTransactions","dataStr","JSON","stringify","blob","Blob","type","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","exportData","addTransactions","addGroupBills","addBills","importData","targets","id","name","target","date","getTargets","forEach","targetUrl","TARGETS","targetIdUrl","TARGETID","targetHandlers","newTarget","uuidv4","toString","push","addTarget","targetId","index","findIndex","t","updateTarget","splice","deleteTarget","worker","setupWorker","startWorker","start","serviceWorker","onUnhandledRequest","req","print"],"sourceRoot":""}